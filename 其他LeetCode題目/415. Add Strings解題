`
char * addStrings(char * A, char * B){
    int lenA = strlen(A);
    int lenB = strlen(B);
    int maxLen = lenA > lenB ? lenA : lenB;

    int carry = 0;
    int digitA, digitB, digitSum;

    char* sum = (char*) malloc((maxLen + 2) * sizeof(char));
    if (sum == NULL) {
        printf("Error: Memory allocation failed.\n");
        exit(1);
    }

    sum[maxLen + 1] = '\0';

    for (int i = 0; i < maxLen; i++) {
        digitA = i < lenA ? A[lenA - 1 - i] - '0' : 0;
        digitB = i < lenB ? B[lenB - 1 - i] - '0' : 0;

        digitSum = digitA + digitB + carry;

        sum[maxLen - i] = (digitSum % 10) + '0';
        carry = digitSum / 10;
    }

    if (carry > 0) {
        sum[0] = carry + '0';
    } else {
        memmove(sum, sum + 1, maxLen + 1);
    }

    return sum;
}
`
